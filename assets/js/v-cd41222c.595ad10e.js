(self.webpackChunkabcjs=self.webpackChunkabcjs||[]).push([[524],{7228:(n,a,s)=>{"use strict";s.r(a),s.d(a,{data:()=>e});const e={key:"v-cd41222c",path:"/visual/overview.html",title:"Overview (renderAbc)",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Multiple Tunes",slug:"multiple-tunes",children:[]},{level:2,title:"Invisible Rendering",slug:"invisible-rendering",children:[]},{level:2,title:"Parameters",slug:"parameters",children:[{level:3,title:"elementArray",slug:"elementarray",children:[]},{level:3,title:"abcString",slug:"abcstring",children:[]},{level:3,title:"Options",slug:"options",children:[]}]},{level:2,title:"Return value",slug:"return-value",children:[]}],filePathRelative:"visual/overview.md",git:{updatedTime:159700423e4,contributors:[{name:"Paul Rosen",email:"paul@paulrosen.net",commits:3}]}}},8737:(n,a,s)=>{"use strict";s.r(a),s.d(a,{default:()=>i});var e=s(6252);const t=(0,e.uE)('<h1 id="overview-renderabc"><a class="header-anchor" href="#overview-renderabc">#</a> Overview (renderAbc)</h1><p>The main entry point to draw standard music notation is <code>ABCJS.renderAbc</code>. Many users won&#39;t need to make any other call. That is enough to turn an arbitrary JavaScript string into an SVG image of sheet music.</p><p>The easiest way to get the music drawn is by creating a <code>&lt;div&gt;</code> on the page and passing that element or its ID and an ABC string representing a single tune to that routine. For example:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>target<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> abcString <span class="token operator">=</span> <span class="token string">&quot;X:1\\nT:Example\\nK:Bb\\nBcde|\\n&quot;</span><span class="token punctuation">;</span>\n<span class="token function">renderAbc</span><span class="token punctuation">(</span><span class="token string">&quot;target&quot;</span><span class="token punctuation">,</span> abcString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Alternately:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> abcString <span class="token operator">=</span> <span class="token string">&quot;X:1\\nT:Example\\nK:Bb\\nBcde|\\n&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;target&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">renderAbc</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> abcString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>Note that in javascript, a new line is expressed with the characters &quot;\\n&quot;. Also, some common characters that are used in ABC (that is, <code>&lt;</code>, <code>&gt;</code>, and <code>&amp;</code>) have special meanings in html. They need to be escaped.</p></div><h2 id="multiple-tunes"><a class="header-anchor" href="#multiple-tunes">#</a> Multiple Tunes</h2><p>The string passed in can either be one tune (or tune fragment) or multiple tunes, separated by a blank line and a new <code>X:</code> declaration.</p><p>Instead of passing a single <code>&lt;div&gt;</code> as the first parameter, an array can be passed. Then as many tunes are processed as elements in that array. For instance:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>target1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>target2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> tune1 <span class="token operator">=</span> <span class="token string">&quot;X:1\\nT:Example 1\\nK:Bb\\nBcde|\\n&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> tune2 <span class="token operator">=</span> <span class="token string">&quot;X:1\\nT:Example 2\\nK:Bb\\nBcde|\\n&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> abcString <span class="token operator">=</span> tune1 <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span> tune2<span class="token punctuation">;</span>\n<span class="token function">renderAbc</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;target1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;target2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> abcString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>If there are more tunes in the string than there are <code>&lt;div&gt;</code>s provided. The later tunes are ignored. If there are more <code>&lt;div&gt;</code>s than tunes, then the unused ones are set empty.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>If you want to pick which tune gets rendered, you can use the option <code>startingTune</code>.</p></div><h2 id="invisible-rendering"><a class="header-anchor" href="#invisible-rendering">#</a> Invisible Rendering</h2><p>If you want to do the calculations for rendering, but not have the music appear, use &quot;*&quot; for the output div. That will return the visualObj but not display it. This is useful if you want to process an ABC file just for audio or for analysis.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> abcString <span class="token operator">=</span> <span class="token string">&quot;X:1\\nT:Example\\nK:Bb\\nBcde|\\n&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> renderObj <span class="token operator">=</span> <span class="token function">renderAbc</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> abcString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="parameters"><a class="header-anchor" href="#parameters">#</a> Parameters</h2><p>The full definition of the <code>renderAbc</code> call is:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> tuneObjectArray <span class="token operator">=</span> <span class="token function">renderAbc</span><span class="token punctuation">(</span>elementArray<span class="token punctuation">,</span> abcString<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="elementarray"><a class="header-anchor" href="#elementarray">#</a> elementArray</h3><p>One of the following:</p><ol><li>String containing the ID of an element on the page.</li><li>An HTML element (usually a <code>&lt;div&gt;</code>).</li><li>An array containing a number of the first two items in this list.</li><li>An asterisk.</li></ol><h3 id="abcstring"><a class="header-anchor" href="#abcstring">#</a> abcString</h3><p>A standard string that is in ABC format. This can be one tune, many tunes, or a tune fragment. There are defaults for most items that can be in an ABC string, so you don&#39;t have to include the header fields that you don&#39;t want.</p><h3 id="options"><a class="header-anchor" href="#options">#</a> Options</h3>',27),o=(0,e.Uk)("This is an object containing a wide variety of options. "),p=(0,e.Uk)("See the section on options for more details"),c=(0,e.Uk)("."),r=(0,e.uE)('<h2 id="return-value"><a class="header-anchor" href="#return-value">#</a> Return value</h2><p>The return value is an array of objects that each represent a tune. If you aren&#39;t doing more processing on the music you probably don&#39;t need this. This is what needs to be passed to the TimingCallbacks object and the CreateSynth object.</p><p>There is a lot of valuable info in this object that you can extract that might be useful to you.</p><div class="custom-container warning"><p class="custom-container-title">Return Object Format</p><p>HOWEVER, the format of this object is NOT guaranteed to be backwards compatible, so if you do delve into this and write code that depends on it, you need to retest whenever you upgrade abcjs.</p></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>Don&#39;t forget that the return value is an array. If you are only processing one tune (that&#39;s a pretty common case) you need to use <code>tuneObjectArray[0]</code>.</p></div>',5),i={render:function(n,a){const s=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("p",null,[o,(0,e.Wm)(s,{to:"/visual/render-abc-options.html"},{default:(0,e.w5)((()=>[p])),_:1}),c]),r],64)}}}}]);