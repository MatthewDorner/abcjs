(self.webpackChunkabcjs=self.webpackChunkabcjs||[]).push([[610],{6717:(e,n,s)=>{"use strict";s.r(n),s.d(n,{data:()=>t});const t={key:"v-7904f4d4",path:"/visual/dragging.html",title:"Selecting and Dragging Elements",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Dragging",slug:"dragging",children:[]},{level:2,title:"Styles",slug:"styles",children:[]},{level:2,title:"Specifying what is selectable.",slug:"specifying-what-is-selectable",children:[]}],filePathRelative:"visual/dragging.md",git:{updatedTime:1598138962e3,contributors:[{name:"Paul Rosen",email:"paul@paulrosen.net",commits:2}]}}},8508:(e,n,s)=>{"use strict";s.r(n),s.d(n,{default:()=>p});var t=s(6252);const a=(0,t.uE)('<h1 id="selecting-and-dragging-elements"><a class="header-anchor" href="#selecting-and-dragging-elements">#</a> Selecting and Dragging Elements</h1><p>You can select which type of elements on the page you want to be selectable. If the element is a note, then it can also be draggable.</p><h2 id="dragging"><a class="header-anchor" href="#dragging">#</a> Dragging</h2><p>Using the option:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>abcjs.renderAbc(..., ..., { dragging: true, clickListener: function() {...} })\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>turns on dragging. The user will be able to click on an element, (or use the tab key to go through the elements) and, if it is a draggable element, move it visually. When the user has finished moving the element, the click listener is called. The underlying music is not changed to reflect the user&#39;s action. The clickListener function should modify the ABC string and rerender if the user has made a change.</p><p>The fifth argument in the clickListener function is the results of the drag, if any. It is an object that looks like:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n  step: number,\n  setSelection: function,\n  index: number, \n  max: number,\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>step</code> are the number of visual positions the note was dragged. A negative number means that the note was dragged flatter and positive means it was dragged sharper. This is a purely visual count. That is, if the note was on a line and a <code>1</code> is returned, then the note is now on the space above it. <code>setSelection</code> is a callback to the selection function. You can call that to change the selection programmatically. <code>currentIndex</code> is which item is selected. This number doesn&#39;t mean anything on its own, but is used to call the <code>setSelection</code> function. <code>max</code> is the number of selectable items in the music.</p><h2 id="styles"><a class="header-anchor" href="#styles">#</a> Styles</h2><p>Using the options:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>abcjs.renderAbc(..., ..., { selectionColor: cssColor, dragColor: cssColor })\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>where <code>cssColor</code> is a legal format for a color allows you to control the look of the selection and dragging. For instance, you can use <code>&quot;blue&quot;</code> or <code>#0000ff</code>.</p><h2 id="specifying-what-is-selectable"><a class="header-anchor" href="#specifying-what-is-selectable">#</a> Specifying what is selectable.</h2><p>The following categories of musical items can be set to be selectable independently of each other:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\t&quot;author&quot;\n\t&quot;bar&quot;\n\t&quot;brace&quot;\n\t&quot;clef&quot;\n\t&quot;composer&quot;\n\t&quot;dynamicDecoration&quot;\n\t&quot;ending&quot;\n\t&quot;extraText&quot;\n\t&quot;freeText&quot;\n\t&quot;keySignature&quot;\n\t&quot;note&quot;\n\t&quot;part&quot;\n\t&quot;partOrder&quot;\n\t&quot;rhythm&quot;\n\t&quot;slur&quot;\n\t&quot;subtitle&quot;\n\t&quot;tempo&quot;\n\t&quot;timeSignature&quot;\n\t&quot;title&quot;\n\t&quot;unalignedWords&quot;\n\t&quot;voiceName&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>Using the option:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>abcjs.renderAbc(..., ..., { selectTypes: [] })\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>where the array is a list of items you want to allow the user to select. (Rests are included in the note category.)</p><p>If, instead of an array, you use the value <code>{ selectTypes: true }</code> then all of the items are selectable.</p><p>If, instead of an array, you use the value <code>{ selectTypes: false }</code> then none of the items are selectable.</p>',21),l=(0,t.Uk)("If "),i=(0,t.Wm)("code",null,"selectTypes",-1),o=(0,t.Uk)(" is not passed in, then nothing is selectable (the same behavior as passing "),r=(0,t.Wm)("code",null,"false",-1),c=(0,t.Uk)("), but notes and rests are clickable. (That is, the "),u=(0,t.Uk)("clickListener"),d=(0,t.Uk)(" function will be called on a click. ) This mimics the previous behavior so it is backwards compatible."),p={render:function(e,n){const s=(0,t.up)("RouterLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[a,(0,t.Wm)("p",null,[l,i,o,r,c,(0,t.Wm)(s,{to:"/visual/click-listener.html"},{default:(0,t.w5)((()=>[u])),_:1}),d])],64)}}}}]);