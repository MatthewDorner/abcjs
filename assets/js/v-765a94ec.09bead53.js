(self.webpackChunkabcjs=self.webpackChunkabcjs||[]).push([[153],{9100:(e,a,s)=>{"use strict";s.r(a),s.d(a,{data:()=>n});const n={key:"v-765a94ec",path:"/visual/click-listener.html",title:"Click Listener",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"abcelem",slug:"abcelem",children:[]},{level:2,title:"tuneNumber",slug:"tunenumber",children:[]},{level:2,title:"classes",slug:"classes",children:[]},{level:2,title:"analysis",slug:"analysis",children:[]},{level:2,title:"drag",slug:"drag",children:[]},{level:2,title:"mouseEvent",slug:"mouseevent",children:[]}],filePathRelative:"visual/click-listener.md",git:{updatedTime:1608929887e3,contributors:[{name:"Paul Rosen",email:"paul@paulrosen.net",commits:6}]}}},2719:(e,a,s)=>{"use strict";s.r(a),s.d(a,{default:()=>u});var n=s(6252);const t=(0,n.uE)('<h1 id="click-listener"><a class="header-anchor" href="#click-listener">#</a> Click Listener</h1><p>If you want to get information about what the user has clicked on, you can set up a callback function. The callback function looks like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">clickListener</span><span class="token punctuation">(</span><span class="token parameter">abcelem<span class="token punctuation">,</span> tuneNumber<span class="token punctuation">,</span> classes<span class="token punctuation">,</span> analysis<span class="token punctuation">,</span> drag<span class="token punctuation">,</span> mouseEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">renderAbc</span><span class="token punctuation">(</span><span class="token string">&quot;paper&quot;</span><span class="token punctuation">,</span> abcString<span class="token punctuation">,</span> <span class="token punctuation">{</span> clickListener<span class="token operator">:</span> clickListener <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Here is the data that is returned to you:</p><h2 id="abcelem"><a class="header-anchor" href="#abcelem">#</a> abcelem</h2><p>The internal object that is associated with the element clicked. Use a debugger to see what is available.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>This object is subject to change as the library gets more functionality. There is not a guarantee that it will stay backwards compatible. But that said, the structure of this object doesn&#39;t change much and usually just adds properties.</p></div><h2 id="tunenumber"><a class="header-anchor" href="#tunenumber">#</a> tuneNumber</h2><p>If there are more than one tune in the original abcString, this reports which tune was clicked on.</p><h2 id="classes"><a class="header-anchor" href="#classes">#</a> classes</h2><p>The css classes of the element that was clicked. (This requires the parameter <code>{ add_classes: true }</code>).</p><h2 id="analysis"><a class="header-anchor" href="#analysis">#</a> analysis</h2><p>An object containing the following info about the item clicked:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n   line: 0, // zero-based line\n   measure: 0, // zero-based measure from the beginning of the line\n   voice: 0, // zero-based voice \n   staffPos: { top: 0, height: 0, zero: 0 } // the Y-coordinates in the SVG for the staff system that contains the item. &quot;zero&quot; is the Y-coordinate of the middle-C.\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="drag"><a class="header-anchor" href="#drag">#</a> drag</h2>',15),l=(0,n.Uk)("See the "),c=(0,n.Uk)("Dragging"),i=(0,n.Uk)(" page for more details."),r=(0,n.Wm)("h2",{id:"mouseevent"},[(0,n.Wm)("a",{class:"header-anchor",href:"#mouseevent"},"#"),(0,n.Uk)(" mouseEvent")],-1),o=(0,n.Wm)("p",null,"The original event that triggered this callback.",-1),u={render:function(e,a){const s=(0,n.up)("RouterLink");return(0,n.wg)(),(0,n.j4)(n.HY,null,[t,(0,n.Wm)("p",null,[l,(0,n.Wm)(s,{to:"/visual/dragging.html"},{default:(0,n.w5)((()=>[c])),_:1}),i]),r,o],64)}}}}]);